#+STARTUP: overview
* mac config
** On macos gnu ls is not working
#+begin_src emacs-lisp
  (when is-mimas
    (setq dired-use-ls-dired nil))
#+end_src
* pdf tools
  there should be a better way for this
  #+begin_src emacs-lisp
    ; (use-package pdf-tools
    ;   :ensure t
    ;   :config
    ;   (custom-set-variables
    ;    '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
    ;   (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
  #+end_srcÀç
  
* other  
  #+begin_src emacs-lisp
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

    ;; custom bindings for treemacs
    (with-eval-after-load 'treemacs
      (define-key treemacs-mode-map (kbd "o a -") 'treemacs-visit-node-ace-vertical-split)
      (define-key treemacs-mode-map (kbd "o a /") 'treemacs-visit-node-ace-horizontal-split)
      (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))

    ;; no bell
    (with-eval-after-load 'evil
      (defalias #'forward-evil-word #'forward-evil-symbol)
      ;; make evil-search-word look for symbol rather than word boundaries
      (setq-default evil-symbol-word-search t))

    ;; better grep:
    (setq grep-files-aliases
          '(("all" . "* .[!.]* ..?*")
            ("el" . "*.el")
            ("ch" . "*.[ch]")
            ("c" . "*.c")
            ("cc" . "*.cc *.cxx *.cpp *.C *.CC *.c++")
            ("cch" . "*.h *.cc *.cpp")
            ("hh" . "*.hxx *.hpp *.[Hh] *.HH *.h++")
            ("h" . "*.h")
            ("m" . "[Mm]akefile*")
            ("tex" . "*.tex")))

    ;; (helm-icons-enable)

    (setq
     comp-async-report-warnings-errors nil
     org-confirm-babel-evaluate nil
     evil-want-fine-undo t
     doom-modeline-vcs-max-length 100
     doom-modeline-buffer-encoding nil
     ring-bell-function 'ignore
     helm-buffer-max-length nil
     undo-tree-enable-undo-in-region t
     vc-follow-symlinks t
     projectile-enable-caching t
     c-basic-offset 4)

    (setq python-shell-interpreter "python3")
  #+end_src
* Compile
  #+begin_src emacs-lisp
    (defadvice compile (around use-bashrc activate)
      "Load .bashrc in any calls to bash (e.g. so we can use aliases)"
      (let ((shell-command-switch "-ic"))
        ad-do-it))
    (setq compilation-scroll-output t) ;; make compilation window scroll
    ;;(setq compilation-scroll-output 'first-error) ;; stop at first error

  #+end_src
* Scrolling
  #+begin_src emacs-lisp
    (setq scroll-conservatively 101
          scroll-margin 6
          scroll-preserve-screen-position 't)
  #+end_src 
* magit
  #+begin_src emacs-lisp
    (defadvice magit-diff-visit-file-other-window (after fix-git-gutter activate) (make-window-fringes-smaller-for-git-gutter))
    (with-eval-after-load 'magit
      (define-key magit-hunk-section-map (kbd "M-<return>") 'magit-diff-visit-file-other-window)
      (define-key magit-hunk-section-map (kbd "C-<return>") 'magit-diff-visit-file-other-window)
      (define-key magit-file-section-map (kbd "M-<return>") 'magit-diff-visit-file-other-window)
      (define-key magit-file-section-map (kbd "C-<return>") 'magit-diff-visit-file-other-window))
  #+end_src
* tramp config  
  #+begin_src emacs-lisp
    (setq read-process-output-max (* 1024 1024) ;; 1mb
          tramp-default-method "ssh"
          tramp-verbose 3
          tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
  #+end_src
* dired
  #+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :custom
      (dired-listing-switches "-agho --group-directories-first")
      :config
      (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
      (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-find-file)
      (evil-define-key 'normal dired-mode-map (kbd "o") 'dired-find-file-other-window)
      (evil-define-key 'normal dired-mode-map (kbd "i") 'dired-insert-subdir)

      ;;(setq dired-actual-switches "-agho --group-directories-first")
      ;; look at http://pragmaticemacs.com/category/dired/
      )
  #+end_src
* org   
** org tempo to get <s tp work
   #+begin_src emacs-lisp
     (use-package org-tempo :after org)
   #+end_src
                                                                            
** pitch mode hook                                                                                            
    This is from the system crafters github page:                                                              
    https://github.com/daviwil/dotfiles/blob/master/Emacs.org                                                  
                                                                                                               
       #+begin_src emacs-lisp                                                                                  
         (use-package org-appear                                                                               
           :defer t)                                                                                           
         (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)           
                                                                                                               
         (dolist (face '((org-level-1 . 1.2)                                                                   
                         (org-level-2 . 1.1)                                                                   
                         (org-level-3 . 1.05)                                                                  
                         (org-level-4 . 1.0)                                                                   
                         (org-level-5 . 1.1)                                                                   
                         (org-level-6 . 1.1)                                                                   
                         (org-level-7 . 1.1)                                                                   
                         (org-level-8 . 1.1)))                                                                 
           (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))        
                                                                                                               
         ;; Ensure that anything that should be fixed-pitch in Org files appears that way                      
         (defun mc/setup-org-mode ()                                                                           
           (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)                           
           (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)                                          
           (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)                                        
           (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))                                 
           (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))                               
           (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))                               
           (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))        
           (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))              
           (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)                                        
                                                                                                               
           (org-appear-mode))                                                                                  
                                                                                                               
         (add-hook 'org-mode-hook 'mc/setup-org-mode)                                                          
       #+end_src                                                                          
                
* Overlay mode
** Add 2 more overlay colors
   #+begin_src emacs-lisp
     ;;more overlay colors
     (defface symbol-overlay-face-9
       '((t (:background "orange" :foreground "black")))
       "Symbol Overlay default candidate 9"
       :group 'symbol-overlay)

     (defface symbol-overlay-face-10
       '((t (:background "medium purple" :foreground "black")))
       "Symbol Overlay default candidate 8"
       :group 'symbol-overlay)
     (add-to-list 'symbol-overlay-faces 'symbol-overlay-face-9)
     (add-to-list 'symbol-overlay-faces 'symbol-overlay-face-10)
   #+end_src
* LSP config
  #+begin_src emacs-lisp
    (setq lsp-file-watch-ignored '(
                                   "[/\\\\]\\.git$"
                                   "[/\\\\]\\.hg$"
                                   "[/\\\\]\\.bzr$"
                                   "[/\\\\]_darcs$"
                                   "[/\\\\]\\.svn$"
                                   "[/\\\\]_FOSSIL_$"
                                   "[/\\\\]\\.idea$"
                                   "[/\\\\]\\.bitbucket$"
                                   "[/\\\\]\\.ensime_cache$"
                                   "[/\\\\]\\.clwb$"
                                   "[/\\\\]\\.vscode$"
                                   "[/\\\\]\\.eunit$"
                                   "[/\\\\]node_modules$"
                                   "[/\\\\]\\.fslckout$"
                                   "[/\\\\]\\.tox$"
                                   "[/\\\\]\\.stack-work$"
                                   "[/\\\\]\\.bloop$"
                                   "[/\\\\]\\.metals$"
                                   "[/\\\\]target$"
                                   "[/\\\\]\\.deps$"
                                   "[/\\\\]build-aux$"
                                   "[/\\\\]autom4te.cache$"
                                   ".cache/bazel"
                                   "[/\\\\]\\.ccls-cache$"
                                   "bazel-out"
                                   "bazel-werkstatt"
                                   "bazel-bin"
                                   "bazel-testlogs"
                                   "[/\\\\]\\.reference$"
                                   "[/\\\\]bazel-out$"
                                   "[/\\\\]bazel-werkstatt$"
                                   "[/\\\\]bazel-bin$"
                                   "[/\\\\]bazel-testlogs$"
                                   "/home/conradmi/.cache"
                                   "bazel-genfiles$"
                                   )
          lsp-idle-delay 0.5
          evil-want-Y-yank-to-eol nil
          writeroom-width 160
          )
  #+end_src
* Own functions 
  #+begin_src emacs-lisp
      (add-to-load-path
       (expand-file-name "~/dot/"))
      (require 'own-functions)

    (defvar mc-org-files-location (if is-jupiter
                                      "~/dropbox-sync/"
                                    "~/Dropbox/org/"))

    (defun mc::open-inbox () (interactive) (find-file (concat mc-org-files-location "inbox.org")))
    (defun mc::open-notebook () (interactive) (find-file (concat mc-org-files-location "notebook.org")))
    (defun mc::open-recipees () (interactive) (find-file (concat mc-org-files-location "recipees.org")))
  #+end_src 
* visual
** On Linux, we want transparency (sometimes)
   #+begin_src emacs-lisp
     ;; (when is-jupiter
     ;;   (spacemacs/enable-transparency))
   #+end_src
* Keybindings
  #+begin_src emacs-lisp
    (spacemacs/declare-prefix "o" "custom")
    (spacemacs/set-leader-keys
      "oi" 'mc::open-inbox
      "oo" 'mc::open-inbox
      "or" 'mc::open-recipees
      "oc" 'mc::search-cpp-ref
      "oB" 'org-brain-visualize)

    (spacemacs/set-leader-keys
      "aa" 'org-agenda-list
      "gh" 'git-gutter+-show-hunk-inline-at-point)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "tu" 'org-dblock-update)
  #+end_src

  
  
